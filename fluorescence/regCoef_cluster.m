function [clustID, oriInd] = regCoef_cluster(input,tRange, numClust, tlabel,xtitle,savefluofigpath)
% % plot_selectivity %
%PURPOSE:   Plot selectivity, based on PSTHs from two conditions
%AUTHORS:   AC Kwan 170515
%
%INPUT ARGUMENTS
%   input:       Structure generated by calc_selectivity()
%   sortParam:
%       if #values = 2, e.g. [1 3], then sort the cells based on selectivity value in this time period
%       if #values = number of cells, e.g. [1 3 4 2 5], then sort the cells directly based on this ordering
%   tlabel:       Text to put as title of the plot.
%   xtitle:       Text to put as the label for x-axis.
%   colorRange:   Max and min values that define the range of the color scale
%
%OUTPUT ARGUMENTS
%   cellOrder:    Sorting order of the cells
%                 (could be fed back as input 'sortParam' for next call of
%                 this function)

%% Plotting parameters
colors=cbrewer('div','RdBu',256);
colors=flipud(colors);

%% Setup
t=input.t;
nCells=size(input.coeff,1);   
    
%preference is (signal_event1 - signal_event2)/(signal_event1 + signal_event2)
pref=[];
for j=1:nCells
    pref(:,j)=input.coeff(j,:);
end

%%
tInd = (t<tRange(2) & t>tRange(1));
clusterMat = pref(tInd,input.sigInd)';
       
        
        maxclust = numClust;
        T = clusterdata(clusterMat,'Linkage','complete','SaveMemory','off','Maxclust',maxclust,'distance','correlation');
        % average;complete;single;weighted
        
        % rearrange the groups by the covered area of the first 2 seconds
         
        line11 = nanmean(pref(:,input.sigInd(T==1)),2);
        line22 = nanmean(pref(:,input.sigInd(T==2)),2);
        line33 = nanmean(pref(:,input.sigInd(T==3)),2);
        areaUnder = zeros(1,maxclust);
        areaUnder(1) = trapz(t(t>1&t<2.5),line11(t>1 & t<2.5));
        areaUnder(2) = trapz(t(t>1&t<2.5),line22(t>1&t<2.5));
        areaUnder(3) = trapz(t(t>1&t<2.5),line33(t>1&t<2.5));
        [sorted,ind] = sort(areaUnder);

        tempT = T;
        T(tempT==ind(1)) = 1;
        T(tempT==ind(2)) = 2;
        T(tempT==ind(3)) = 3;
        
        clustID = T;
% save the data
        
        % calculate correlation matrix
        corrMat = zeros(length(input.sigInd));
         %regroup the cells with cluster results
       
         
         oriInd = [];
       
         clusterNum = zeros(1,maxclust);
         for gg=1:maxclust
            
             oriInd = [oriInd,input.sigInd(T==gg)];
             clusterNum(gg) = sum(T==gg);
         end
         
         %  oriInd2 = input.sigInd(clustInd);
        for gg=1:length(clustID)
            for yy = gg:length(clustID)
                coeff = corrcoef(input.coeff(oriInd(gg),:),input.coeff(oriInd(yy),:));
                corrMat(gg,yy) = coeff(1,2);
            end
        end
        
        for yy=1:length(clustID)
            for gg = yy+1:length(clustID)
                
                corrMat(gg,yy) = corrMat(yy,gg);
            end
        end
        
 
        
        z  =linkage(T,'ward');
       
    % plot the cluster

    %% plot everything in one plot
     figure;
     subplot(2,3,3)
     image(corrMat,'CDataMapping','scaled')
        %hold on;dendrogram(z)
         axis square;
            colors=cbrewer('div','RdBu',256);
        colors=flipud(colors);
        colorRange = [-1 1];
    colormap(colors);
    caxis([-1 1]);
    hold on;
    for cc = 1:length(clusterNum)
        startInd = 1+sum(clusterNum(1:cc-1));
        endInd = sum(clusterNum(1:cc));
        if cc==1
            color = [241, 84, 18]/255;
        elseif cc == 2
            color = [0 0 0];
        elseif cc == 3
            color = [52, 179, 241]/255;
        end
        plot([startInd endInd endInd startInd startInd],[startInd startInd endInd endInd startInd],':','Color',color);
    end
    xticklabels({})
yticklabels({})
 
% plot average coefficient by cluster
% error bar
subplot(2,2,4)
line1 = pref(:,input.sigInd(T==1));
ste = nanstd(line1,0,2)/sqrt(size(line1,2));
plot(t,nanmean(pref(:,input.sigInd(T==1)),2),'Color',[241, 84, 18]/255);
hold on;
errorshade(t,nanmean(line1,2)-ste,nanmean(line1,2)+ste,[241, 84, 18]/255,0.5);
hold on;
line2 = pref(:,input.sigInd(T==2));
ste = nanstd(line2,0,2)/sqrt(size(line2,2));
plot(t,nanmean(pref(:,input.sigInd(T == 2)),2),'k');
errorshade(t,nanmean(line2,2)-ste,nanmean(line2,2)+ste,[0 0 0]/255,0.5);
hold on;
line3 = pref(:,input.sigInd(T==3));
ste = nanstd(line3,0,2)/sqrt(size(line3,2));
plot(t,nanmean(pref(:,input.sigInd(T == 3)),2), 'Color',[52, 179, 241]/255);
errorshade(t,nanmean(line3,2)-ste,nanmean(line3,2)+ste,[52, 179, 241]/255,0.5);
set(gca,'box','off');

% check the spatial position of different clusters
    % plot coefficient by cluster
% 
if isfield(input,'sigMat')
clustMat = NaN(size(input.sigMat,1),size(input.sigMat,2));
    tempind = 1;
for xx = 1:size(input.sigMat,1)
    for zz = 1:size(input.sigMat,2)
    
        if input.sigMat(xx,zz)==1
            clustMat(xx,zz) = T(tempind);
            tempind = tempind+1;
        end
    end
end

subplot(2,3,2)
b=image(clustMat,'CDataMapping','scaled'); %,
set(b,'AlphaData',~isnan(clustMat))
set(gca, 'Color', [0.7, 0.7, 0.7])
axis square;
colors = [[241, 84, 18]/255;[0, 0, 0];[52, 179, 241]/255 ];
colormap(colors);
caxis([1, 3]);
xticklabels({})
yticklabels({})
%title(titleText);

%plot in pseudocolor
end
subplot(1,3,1);
image(t,1:length(input.sigInd),pref(:,oriInd)','CDataMapping','scaled');
hold on; plot([0 0],[0 nCells+1],'w');
hold on; plot([t(1) t(end)],[clusterNum(1) clusterNum(1)],'Color',[241, 84, 18]/255)
hold on; plot([t(1) t(end)],[sum(clusterNum(1:2)) sum(clusterNum(1:2))],'k')
   colors=cbrewer('div','RdBu',256);
        colors=flipud(colors);
        colorRange = [-1 1];
colormap(colors);
caxis([-0.05 0.05]);      %normalize dF/F heatmap to max of all conditions
ylabel('Cells');
xlabel(xtitle);
title(tlabel);


%make a color scale bar
% subplot(3,20,60);
% image(0,linspace(colorRange(1),colorRange(2),100),linspace(colorRange(1),colorRange(2),100)','CDataMapping','scaled');
% colormap(colors);
% caxis([colorRange(1) colorRange(2)]);
% title(['Coefficient']);
% set(gca,'YDir','normal');
% set(gca,'XTick',[]);

savepath = fullfile(savefluofigpath,'clustering');
if ~exist(savepath)
    mkdir(savepath)
end

print(gcf,'-dpng',fullfile(savepath,[tlabel,' cluster']));
saveas(gcf, fullfile(savepath,[tlabel,' cluster']), 'fig');
saveas(gcf, fullfile(savepath,[tlabel,' cluster']), 'svg');
close all;


%% calculate rise time/decay time/
% riseT = zeros(1, nCells);
% decayTau = zeros(1,nCells);
% peakT = zeros(1,nCells);
% areaUnder = zeros(1,nCells);
% 
% for rr = 1:nCells
%     smoothedCurve = smooth(pref(:,rr));
%     % detect change point
%         [TF, S1, S2] = ischange(smoothedCurve, 'linear', 'MaxNumChanges',3);
%         segline = S1.*(1:length(smoothedCurve))' + S2;
%         [t1] = find(TF==1);
% 
%         % plot the change point
%         figure;plot(t,smoothedCurve);
%         hold on;scatter([t(t1(1)), t(t1(2)),t(t1(3))],[smoothedCurve(t1(1)),smoothedCurve(t1(2)),smoothedCurve(t1(3))],80,'filled');
%         segline = S1.*(1:length(smoothedCurve))' + S2;
%         hold on;plot(t,segline);
%         riseT(rr) = risetime(smoothedCurve,t);
%         figure;
%         risetime(smoothedCurve,t);
%         % decay tau
%         f = fit(t(t1(2):end),smoothedCurve(t1(2):end),'exp1');
%         decayTau(rr) = f.b;
% 
%         % time to reach peak
%         peakT(rr) = t(t1(2));
% 
%         % area under the curve
%         areaUnder(rr) = trapz(t(t>0&t<4),smoothedCurve(t>0 & t<4));
% 
% end

