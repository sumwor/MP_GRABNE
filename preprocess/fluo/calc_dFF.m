function [ cells ] = calc_dFF( stackInfo, imageTrigTimes )
% % calc_dFF %
%PURPOSE:   Calculate dF/F from raw fluorescence files (generated by the
%           cellROI program)
%AUTHORS:   AC Kwan 170515
%
%INPUT ARGUMENTS
%   stackInfo:      content of the stackInfo.mat file for this imaging session
%   imageTrigTimes: the time in which Presentation sends TTL pulse to ScanImage
%                   to trigger a new .tiff file
%
%OUTPUT ARGUMENTS
%   cells:          a structure containing fields, including dFF

cd(stackInfo.roiDir);
rois = dir('*cell*.mat');
for i = 1:numel(rois) 
    celldata(i) = load(rois(i).name); 
end

%% CALCULATE dF/F FOR EACH CELL

% calculate framerate

%dF/F = (F(t)-Fo)/Fo
%to estimate Fo (baseline fluorescence), set moving window for smoothing
win = 2*60*stackInfo.frameRate;  %window duration = 2 minutes

disp(['Calculating dF/F (may take several minutes)...']);

for i = 1:numel(rois) 
    f = celldata(i).cellf(:);
    baseline = nan(size(f));
    
%     tic
    parfor j = 1:length(f)
        idx1 = max(1,round(j-win/2));
        idx2 = min(length(f),round(j+win/2));
        baseline(j) = prctile(f(idx1:idx2),10); %10th percentile of F(t)
    end
%     toc
    
%     tic
%     for j = 1:length(f)
%         idx1 = max(1,round(j-win/2));
%         idx2 = min(length(f),round(j+win/2));
%         baseline(j) = prctile(f(idx1:idx2),10); %10th percentile of F(t)
%     end
%     toc
    cells.cellf{i} = f; %All column vectors
    cells.baseline{i} = baseline;
    cells.dFF{i} = (f-baseline)./(baseline);
    
    cells.bw{i} = celldata(i).bw;
    cells.isRedCell{i} = 0;
end

%% CREATE TIME VECTOR FOR ALIGNMENT WITH BEHAVIORAL/PHYSIOLOGICAL DATA

%start of an .tiff file is the behavioral trial start time adjusted by
%trigDelay (Presentation sends trigger to ScanImage to request start of a
%new file, slight delay until current frame is completed to start the new
%file)

if numel(imageTrigTimes) == numel(stackInfo.trigDelay)    %same number of imaging files as number of trials, as it should be
    startTimes = imageTrigTimes(1) - stackInfo.trigDelay(1);  % new scanimage record the time of every single frame independent to trials
    
elseif numel(imageTrigTimes) < numel(stackInfo.trigDelay) %behavior aborted before imaging finishes
    disp(['CAUTION: Behavioral start times (' int2str(numel(imageTrigTimes)) ') < imaging triggers (' int2str(numel(stackInfo.trigDelay)) '); inconsistent number of trials/files. CHECK!']);    
    temp = stackInfo.trigDelay(1:numel(imageTrigTimes));
    startTimes = imageTrigTimes(1) - temp(1);
    
    %crop the fluorescence data
    cropIdx=sum(stackInfo.nFrames(1:numel(imageTrigTimes))); %save only frames up to end of last behavioral trial
    for i=1:numel(rois)
        cells.cellf{i} = cells.cellf{i}(1:cropIdx);
        cells.baseline{i} = cells.baseline{i}(1:cropIdx);
        cells.dFF{i} = cells.dFF{i}(1:cropIdx);
       
        
    end
else            %imaging aborted before behavior finishes
    % usually because of the deletion of the last trial
    if numel(imageTrigTimes)-1 == numel(stackInfo.trigDelay)
        disp(['CAUTION: Behavioral start times (' int2str(numel(imageTrigTimes)) ') < imaging triggers (' int2str(numel(stackInfo.trigDelay)) '); inconsistent number of trials/files. CHECK!']);
        temp = stackInfo.trigDelay(1);
        startTimes = imageTrigTimes(1) - temp;
        
        %crop the fluorescence data
        cropIdx=sum(stackInfo.nFrames(1:numel(imageTrigTimes)-1)); %save only frames up to end of last behavioral trial
        for i=1:numel(rois)
            cells.cellf{i} = cells.cellf{i}(1:cropIdx);
            cells.baseline{i} = cells.baseline{i}(1:cropIdx);
            cells.dFF{i} = cells.dFF{i}(1:cropIdx);
            
            
        end
    end
end

% once we figure out the alignment of image trigger time, then line up the
% frames within each .tiff file based on the nominal frame rate
% dt = 1/stackInfo.frameRate;

for i = 1:numel(stackInfo.nFrames)
    %nFrames = stackInfo.nFrames(i);
    frameTimes{i} = startTimes+stackInfo.scim_header(i).frameTimestamps_sec;
end
if numel(imageTrigTimes) == numel(stackInfo.trigDelay)
    cells.t = [frameTimes{:}]'; %Column vector
elseif numel(imageTrigTimes) < numel(stackInfo.trigDelay) 
    t_temp = [frameTimes{:}]'; %Column vector
    cells.t = t_temp(1:cropIdx);
else
    if numel(imageTrigTimes)-1 == numel(stackInfo.trigDelay) 
        t_temp = [frameTimes{:}]'; %Column vector
        cells.t = t_temp(1:cropIdx);
    end
end



end